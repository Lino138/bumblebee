heat_template_version: rocky

description: Bumblebee dev host stack

parameters:
  environment_name:
    type: string
  key_name:
    type: string
    constraints:
    - custom_constraint: nova.keypair
  availability_zone:
    type: string
    default: melbourne-qh2
  image:
    type: string
    constraints:
    - custom_constraint: glance.image
  flavor:
    type: string
    constraints:
    - custom_constraint: nova.flavor
  external_network:
    type: string
    default: melbourne
    constraints:
    - custom_constraint: neutron.network
  server_count:
    type: number
  zone:
    type: string
    constraints:
    - custom_constraint: designate.zone
  oidc_server:
    type: string
  secret:
    type: string
    constraints:
    - custom_constraint: barbican.secret
  db_hostname:
    type: string
  db_name:
    type: string
    default: bumblebee
  db_username:
    type: string
    default: bumblebee
  db_password:
    type: string


resources:

  secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Security group rules
      name: { get_param: "OS::stack_name" }
      rules:
        - remote_ip_prefix: 192.168.0.0/16
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: 192.168.0.0/16
          protocol: udp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 8000
          port_range_max: 8000
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  port:
    # https://docs.openstack.org/heat/latest/template_guide/openstack.html#OS::Neutron::Port
    type: OS::Neutron::Port
    properties:
      name: { get_param: "OS::stack_name" }
      network:
        list_join: [ '_', [{ get_param: environment_name }, 'mgmt'] ]
      security_groups:
        - { get_resource: secgroup }
        - { list_join: [ '_', [{ get_param: environment_name }, 'bastion'] ] }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: port }

  recordset:
    type: OS::Designate::RecordSet
    properties:
      name:
        list_join: [ '-', [{ get_param: environment_name }, 'dev'] ]
      type: A
      records:
      - { get_attr: [floating_ip, floating_ip_address] }
      zone: { get_param: zone }

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 600

  cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        timezone: Australia/Melbourne
        write_files:
        - path: /var/lib/nectar/.ssh/config
          owner: nectar
          content: |
            Host *
                ForwardAgent yes
        - path: /etc/ansible/facts.d/bumblebee.fact
          content:
            str_replace:
              template: |
                {
                  "env": "__env__",
                  "hostname": "__hostname__",
                  "zone": "__zone__",
                  "fqdn": "__hostname__.__zone__",
                  "db_hostname": "__db_hostname__",
                  "db_name": "__db_name__",
                  "db_username": "__db_username__",
                  "db_password": "__db_password__"
                }
              params:
                __env__: { get_param: environment_name }
                __hostname__:
                  list_join: [ '-', [{ get_param: environment_name }, 'dev'] ]
                __zone__:
                  yaql:
                    expression: 'regex("\.$").replace($.data.value, "")'
                    data:
                      value: { get_param: zone }
                __db_hostname__: { get_param: db_hostname }
                __db_name__: { get_param: db_name }
                __db_username__: { get_param: db_username }
                __db_password__: { get_param: db_password }
        runcmd:
        - systemctl disable --now guacd
        - systemctl disable --now tomcat9

  cloud_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/bin/bash -ex
            mkdir -p /etc/ansible/facts.d
            __WC_NOTIFY__ --data-binary '{"status": "SUCCESS"}'  # Notify heat that we are done here
          params:
            __WC_NOTIFY__: { get_attr: ['wait_handle', 'curl_cli'] }

  server_config:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: cloud_config }
      - config: { get_resource: cloud_script }

  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: "OS::stack_name" }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      availability_zone: { get_param: availability_zone }
      networks:
        - port: { get_resource: port }
      metadata:
        ansible_host_groups:
          list_join:
            - ','
            - - { get_param: "OS::stack_name" }
              - { get_param: environment_name }
        ansible_host_vars: ''
      user_data_format: RAW
      user_data: { get_resource: server_config }

  db:
    type: OS::Trove::Instance
    properties:
      name:

      availability_zone: { get_param: availability_zone }
      #networks: [{"network": { get_resource: bumblebee_network }, "port": { get_resource: db_port } }]
      databases:
        - name: bumblebee
        - name: test_bumblebee
      datastore_type: MySQL
      datastore_version: 8.0-27
      flavor: db.small
      size: 2
      users:
        - name: { get_param: db_username }
          password: { get_param: db_password }
          databases:
            - { get_param: db_name }

  db_recordset:
    type: OS::Designate::RecordSet
    properties:
      name:
        list_join: [ '-', [{ get_param: environment_name }, 'db'] ]
      type: CNAME
      records:
      -
        str_replace:
          template: __fqdn__.
          params:
            __fqdn__: { get_attr: [ db, hostname ] }
      zone: { get_param: zone }


outputs:
  hostname:
    description: Dev FQDN
    value: { get_attr: [ recordset, show, name ] }
  instance_id:
    description: ID of the server
    value: { get_resource: server }
  ip_address:
    description: IP address of the VDI server
    value: { get_attr: [ floating_ip, floating_ip_address] }
