version: "3"

services:
  bumblebee:
    build: .
    image: bumblebee
    stdin_open: true
    tty: true
    environment: &bb_env
      DEBUG: "True"
      DB_HOST: mariadb
      DB_USER: root
      DB_PASSWORD: toor
      REDIS_HOST: redis
    env_file:
    - .env
    volumes:
    - .:/app
    restart: unless-stopped
    command: django-admin runserver 0.0.0.0:8080
    depends_on:
      init:
        condition: service_completed_successfully
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      reverse-proxy:
        condition: service_healthy
    labels:
      #  Enable traefik to expose the provider
      - "traefik.enable=true"
      # Use router 'bumblebee' points to 'bumblebee-secure'
      - "traefik.http.routers.bumblebee.entrypoints=bumblebee-secure"
      # Domain to listen to
      - "traefik.http.routers.bumblebee.rule=Host(`bumblebee`)"
      # Use resolver 'letsencrypt' https
      - "traefik.http.routers.bumblebee.tls=true"
      - "traefik.http.routers.bumblebee.tls.certresolver=letsencrypt"
      # Register port for service 'bumblebee'
      - "traefik.http.services.bumblebee.loadbalancer.server.port=8080"

      # Use middleware 'bumblebee-https'
      # Redirect to https via 'bumblebee-https'
      - "traefik.http.middlewares.bumblebee-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.bumblebee-https.redirectscheme.port=443"
      - "traefik.http.routers.bumblebee.middlewares=bumblebee-https"
    links:
    - mariadb:mariadb
    - redis:redis
    - keycloak:keycloak


  init:
    build: .
    links:
    - mariadb:mariadb
    - redis:redis
    environment:
      <<: *bb_env
      DJANGO_MIGRATE: "True"
    volumes:
    - .:/app
    depends_on:
      mariadb:
        condition: service_healthy
    restart: on-failure
    command: /docker-setup.sh

  rqscheduler:
    build: .
    environment: *bb_env
    env_file:
    - .env
    restart: on-failure
    command: django-admin rqscheduler -i5
    depends_on:
      init:
        condition: service_completed_successfully
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    links:
    - mariadb:mariadb
    - redis:redis
    volumes:
    - .:/app

  rqworker:
    build: .
    links:
    - mariadb:mariadb
    - redis:redis
    environment: *bb_env
    env_file:
    - .env
    restart: on-failure
    command: django-admin rqworker
    depends_on:
      init:
        condition: service_completed_successfully
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
    - .:/app

  mariadb:
    image: mariadb:11.3.2
    environment:
      MARIADB_ROOT_PASSWORD: toor
    ports:
    - 3306:3306
    volumes:
    - /docker-data/mariadb_data:/var/lib/mysql
    - ./docker-init/mariadb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mariadb-admin", "-uroot", "-ptoor", "ping", "--silent"]

  redis:
    image: redis:alpine
    ports:
    - 6379:6379
    volumes:
    - /docker-data/redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  guacd:
    image: guacamole/guacd:1.5.0
    restart: unless-stopped
    ports:
    - 4822:4822

  guacamole:
    image: guacamole/guacamole:1.5.0
    restart: unless-stopped
    environment:
      GUACD_HOSTNAME: guacd
      # GUACD_PORT: 8080
      # Guacamole has to share the database with Bumblebee.
      MYSQL_HOSTNAME: mariadb
      MYSQL_DATABASE: bumblebee
      MYSQL_USER: root
      MYSQL_PASSWORD: toor
    env_file:
    - .env
    labels:
      #  Enable traefik to expose the provider
      - "traefik.enable=true"
      # Use router 'guacamole' points to 'guacamole-secure'
      - "traefik.http.routers.guacamole.entrypoints=guacamole-secure"
      # Domain to listen to
      - "traefik.http.routers.guacamole.rule=Host(`guacamole`)"
      # Use resolver 'letsencrypt' https
      - "traefik.http.routers.guacamole.tls=true"
      - "traefik.http.routers.guacamole.tls.certresolver=letsencrypt"
      # Register port for service 'guacamole'
      - "traefik.http.services.guacamole.loadbalancer.server.port=8080"

      # Use middleware 'guacamole-https'
      # Redirect to https via 'guacamole-https'
      - "traefik.http.middlewares.guacamole-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.guacamole-https.redirectscheme.port=9000"
      - "traefik.http.routers.guacamole.middlewares=guacamole-https"
    depends_on:
      guacd:
        condition: service_started
      mariadb:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      reverse-proxy:
        condition: service_healthy


  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    environment:
      KC_DB: mariadb
      KC_DB_URL: jdbc:mariadb://mariadb/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      # KC_HOSTNAME_STRICT_HTTPS: 'false'
      KC_HTTP_PORT: 8080
      KC_PROXY: edge
    labels:
      #  Enable traefik to expose the provider
      - "traefik.enable=true"
      # Use router 'keycloak' points to 'keycloak-secure'
      - "traefik.http.routers.keycloak.entrypoints=keycloak-secure"
      # Domain to listen to
      - "traefik.http.routers.keycloak.rule=Host(`keycloak`)"
      # Use resolver 'letsencrypt' https
      - "traefik.http.routers.keycloak.tls=true"
      - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"
      # Register port for service 'keycloak'
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"

      # Use middleware 'keycloak-https'
      # Redirect to https via 'keycloak-https'
      - "traefik.http.middlewares.keycloak-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.keycloak-https.redirectscheme.port=8443"
      - "traefik.http.routers.keycloak.middlewares=keycloak-https"
    volumes:
    - ./docker-init/keycloak:/opt/keycloak/data/import
    depends_on:
      mariadb:
        condition: service_healthy
      reverse-proxy:
        condition: service_healthy
    command: start-dev --import-realm --http-enabled true --health-enabled true
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8090;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"]

  phpmyadmin:
    image: phpmyadmin
    environment:
      PMA_HOST: mariadb
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
      APACHE_PORT: 8080
    labels:
      #  Enable traefik to expose the provider
      - "traefik.enable=true"
      # Use router 'phpmyadmin' points to 'phpmyadmin-secure'
      - "traefik.http.routers.phpmyadmin.entrypoints=phpmyadmin-secure"
      # Domain to listen to
      - "traefik.http.routers.phpmyadmin.rule=Host(`phpmyadmin`)"
      # Use resolver 'letsencrypt' https
      - "traefik.http.routers.phpmyadmin.tls=true"
      - "traefik.http.routers.phpmyadmin.tls.certresolver=letsencrypt"
      # Register port for service 'phpmyadmin'
      - "traefik.http.services.phpmyadmin.loadbalancer.server.port=8080"

      # Use middleware 'phpmyadmin-https'
      # Redirect to https via 'phpmyadmin-https'
      - "traefik.http.middlewares.phpmyadmin-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.phpmyadmin-https.redirectscheme.port=8306"
      - "traefik.http.routers.phpmyadmin.middlewares=phpmyadmin-https"
    depends_on:
      mariadb:
        condition: service_healthy
      reverse-proxy:
        condition: service_healthy

  reverse-proxy:
    image: traefik:v2.11
    command:
      - --providers.docker
      # Set dashboard
      - --api.insecure=false
      # Only enabled containers should be exposed
      - --providers.docker.exposedByDefault=false

      # Use resolver 'letsencrypt'
      # Enable ACME with automatic SSL.
      - --certificatesresolvers.letsencrypt.acme.email=foo@foo.com
      - --certificatesresolvers.letsencrypt.acme.storage=/proxy/letsencrypt.json
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true

      # Entrypoint 'bumblebee-secure'
      - --entrypoints.bumblebee-secure.address=:443
      # Entrypoint 'guacamole-secure'
      - --entrypoints.guacamole-secure.address=:9000
      # Entrypoint 'keycloak-secure'
      - --entrypoints.keycloak-secure.address=:8443
      # Entrypoint 'phpmyadmin-secure'
      - --entrypoints.phpmyadmin-secure.address=:8306
    ports:
      # The bumblebee port
      - 443:443
      # The guacamole port
      - 9000:9000
      # The keycloak port
      - 8443:8443
      # The phpmyadmin port
      - 8306:8306
      # Dashboard
      # - "8080:8080"
    labels:
      #  Enable traefik to expose the provider
      - "traefik.enable=true"
    volumes:
      # Allow listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - /docker-data/proxy_data:/proxy
    healthcheck:
      test: ["CMD-SHELL", "true"]  # TODO

 user_service:
    build:
      context: ./user_service
    image: user_service
    environment:
      FLASK_ENV: development
    ports:
      - "5000:5000"
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user_service.entrypoints=user_service-secure"
      - "traefik.http.routers.user_service.rule=Host(`user_service`)"
      - "traefik.http.routers.user_service.tls=true"
      - "traefik.http.routers.user_service.tls.certresolver=letsencrypt"
      - "traefik.http.services.user_service.loadbalancer.server.port=5000"
      - "traefik.http.middlewares.user_service-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.user_service-https.redirectscheme.port=443"
      - "traefik.http.routers.user_service.middlewares=user_service-https"


volumes:
  mariadb_data:
  redis_data:
  proxy_data:

